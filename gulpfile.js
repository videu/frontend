/* SPDX-License-Identifier: AGPL-3.0-or-later */
/**
 * @file Build tasks for gulp.
 *
 * @license
 * Copyright (c) 2020 Felix Kopp <sandtler@sandtler.club>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY of FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

require('dotenv').config();

const gulp = require('gulp');
const del = require('del');
const spawn = require('child_process').spawn;
const fs = require('fs');
const path = require('path');
const rollup = require('rollup');

/**
 * Write to a file asynchronously.
 *
 * @param {PathLike} path The file path.
 * @param {string|Buffer} content The file content.
 */
function asyncWriteFile(path, content) {
    return new Promise(
        resolve => fs.writeFile(path, content, resolve)
    );
}

/**
 * Gulp task for writing the `env.js` file.
 *
 * @param {function} cb The gulp callback.
 */
async function writeEnv(cb) {
    const env =
        process.env.NODE_ENV === 'development' ? 'development' : 'production';

    /* TODO: Maybe find a way that's not the ghetto-est one I could think of */
    const contents =
`/* auto-generated by gulp, do not edit manually */
window._videu = {
    env: '${env}',
    appName: '${process.env.VIDEU_APP_NAME || 'videu'}',
    backendRoot: '${process.env.VIDEU_BACKEND_ROOT || ''}',
};
window.process = {
    env: { NODE_ENV: '${env}' }
};
`;

    try  {
        await Promise.all([
            asyncWriteFile(
                path.resolve(__dirname, 'env.js'),
                contents
            ),
            asyncWriteFile(
                path.resolve(__dirname, 'dist', 'env.js'),
                contents
            ),
        ]);

        cb();
    } catch (err) {
        cb(err);
    }
}
module.exports.writeEnv = writeEnv;

/**
 * Gulp task for cleaning the build directory.
 *
 * @param {function} cb The gulp callback.
 */
async function clean(cb) {
    try {
        await del('env.js');
        await del('tsbuild');
        await del('dist');
        cb();
    } catch (err) {
        cb(err);
    }
}
module.exports.clean = clean;

async function rollupBuild(cb) {
    const rollupConfig = require('./rollup.config.js').defaultConfig;
    const outputOptions = rollupConfig.output;

    const bundle = await rollup.rollup(rollupConfig);
    await bundle.write(outputOptions);

    cb();
}
module.exports.rollupBuild = rollupBuild;

/** The main build task. */
module.exports.build = gulp.series(clean, rollupBuild, writeEnv);

/**
 * Gulp task for running tsc in watch mode in parallel w/ `es-dev-server`
 * because the latter doesn't support TypeScript natively.  That's also the
 * reasony why we need two separate `index.html`s, because tsc can't transform
 * the module import statement in the HTML file on its own.
 * So, `index.dev.html` just has a hard-coded import path pointing to the output
 * dir of tsc as specified in `tsconfig.json`.  Rollup has a TypeScript plugin
 * and therefore understands this TypeScript import in HTML directly, so we
 * don't need
 */
function devServer() {
    const spawnOpts = {
        /*
         * `shell` option for Windows compatibility.  See:
         * <https://nodejs.org/api/child_process.html#child_process_spawning_bat_and_cmd_files_on_windows>
         */
        shell: true,
        stdio: 'inherit'
    };

    spawn('tsc', ['--watch'], spawnOpts);
    spawn(
        'es-dev-server',
        [
            '--app-index', 'index.dev.html',
            '--node-resolve',
            '--open',
            '--watch',
        ],
        spawnOpts,
    );
}
module.exports.devServer = devServer;

/**
 * Gulp task to run `tsc --watch` and `es-dev-server --watch` in parallel.
 */
module.exports.start = gulp.series(writeEnv, devServer);
